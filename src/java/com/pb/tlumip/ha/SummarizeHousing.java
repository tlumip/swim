/*
 * Copyright  2005 PB Consult Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/* Generated by Together */

package com.pb.tlumip.ha;

import com.borland.dx.dataset.SortDescriptor;
import com.borland.dx.dataset.TableDataSet;
import com.borland.dx.dataset.Variant;
import com.pb.common.util.ResourceUtil;

import java.util.Iterator;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.TreeMap;


public class SummarizeHousing {
    public static void main(String[] args) {
        ResourceBundle rb = ResourceUtil.getResourceBundle( "ha" );
        String path = ResourceUtil.getProperty(rb, "population.path");

        TableDataSet householdFile = HAModel.dm.getTableDataSet("SynPopH");
        TreeMap buildingInventory = new TreeMap();
        ZoneBuilding aKey = new ZoneBuilding(0, 0);
        Integer count;
        do {
            aKey.buildingSize = householdFile.getInt("UNITS1");
            aKey.zoneNumber = householdFile.getInt("TAZ");
            count = (Integer)buildingInventory.get(aKey);
            if (count == null) {
                count = new Integer(1);
            } else {
               count = new Integer(count.intValue()+1);
            }
            buildingInventory.put(aKey, count);
            aKey = new ZoneBuilding(0, 0);
            if (householdFile.atLast()) break;
            householdFile.next();
        } while (true);
        TableDataSet buildingTable = HAModel.dm.getTableDataSet("Dwellings");
        if (buildingTable.getColumns().length == 0) {
	        try {
	            buildingTable.addColumn("TAZ", Variant.INT);
	            buildingTable.addColumn("DwellingsInBuilding", Variant.INT);
	            buildingTable.addColumn("Count", Variant.INT);
	            buildingTable.restructure();
	            buildingTable.setSort(
	                new SortDescriptor(
	                new String[] { "TAZ", "DwellingsInBuilding" }));
	        } catch (com.borland.dx.dataset.DataSetException e) {
	            e.printStackTrace();
	        }
        }
        Iterator it = buildingInventory.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry e = (Map.Entry) it.next();
            ZoneBuilding zb = (ZoneBuilding)e.getKey();
            int quantity = ((Integer)e.getValue()).intValue();
            buildingTable.insertRow(false);
            buildingTable.setInt("TAZ", zb.zoneNumber);
            buildingTable.setInt("DwellingsInBuilding", zb.buildingSize);
            buildingTable.setInt("Count", quantity);
            buildingTable.post();
        }
        HAModel.dm.exportTable("Dwellings", path + "Dwellings");
        System.exit(0);
    }

    static class ZoneBuilding implements Comparable {
        public int compareTo(Object par1) {
            if (!(par1 instanceof ZoneBuilding))
                throw new ClassCastException("Can't compare ZoneBuildingQuantity with other class");
            ZoneBuilding other = (ZoneBuilding)par1;
            if (zoneNumber < other.zoneNumber) return -1;
            if (zoneNumber > other.zoneNumber) return 1;
            if (buildingSize < other.buildingSize) return -1;
            if (buildingSize > other.buildingSize) return 1;
            return 0;
        }

        int zoneNumber;
        int buildingSize;

        public ZoneBuilding(int zone, int buildingSize) {
            this.zoneNumber = zone;
            this.buildingSize = buildingSize;
        }
    }
}
