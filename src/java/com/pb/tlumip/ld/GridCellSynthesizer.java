/*
 * Copyright  2005 PB Consult Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/* Generated by Together */

package com.pb.tlumip.ld;

import com.borland.dx.dataset.DataRow;
import com.borland.dx.dataset.SortDescriptor;
import com.borland.dx.dataset.TableDataSet;
import com.borland.dx.dataset.Variant;
import com.pb.common.datastore.DataManager;
import com.pb.common.util.ResourceUtil;

import java.util.ResourceBundle;

/**
 * This class creates grid cells in a zone based on the aggregate characteristics of the built form in the zone
 * @author John Abraham 
 */
public class GridCellSynthesizer {
     public static void main(String[] args) {
          
        java.util.Random myRandom = new java.util.Random();
        
        ResourceBundle rb = ResourceUtil.getResourceBundle( "ld" );
        path = ResourceUtil.getProperty(rb, "gridCells.path");
        TableDataSet numberOfCellsTab = reloadTableFromScratchFromTextFile("GridCellQuantitiesByTAZ");
        TableDataSet zoningSchemesTab = reloadTableFromScratchFromTextFile("ZoningSchemes");
        TableDataSet gridCellTable = setUpGridCellTable();
        DataRow searchZoningSchemes = new DataRow(zoningSchemesTab,
               new String[] { "ZoningScheme"});
        try {
            while (numberOfCellsTab.inBounds()) {

                int taz = numberOfCellsTab.getInt("TAZ");
                int quantity = numberOfCellsTab.getInt("Quantity");
                float amountOfLand = numberOfCellsTab.getFloat("AmountOfLand");
                String developmentTypeName = numberOfCellsTab.getString("DevelopmentType");
                float minDevelopment = numberOfCellsTab.getFloat("MinDevelopment");
                float maxDevelopment = numberOfCellsTab.getFloat("MaxDevelopment");
                int minAge = numberOfCellsTab.getInt("MinAge") ;
                int maxAge = numberOfCellsTab.getInt("MaxAge") ;
                String zoningScheme = numberOfCellsTab.getString("ZoningScheme");

                searchZoningSchemes.setString("ZoningScheme", zoningScheme);
                if (!zoningSchemesTab.locate(searchZoningSchemes, 0x20)) { // 0x20 is supposed to be
                        // com.borland.dx.dataset.Locate.FIRST but the Locate class def seems to be missing
                        throw new Error("Can't locate Zoning Scheme " + zoningScheme);
                }
                int xSpan = ((int) Math.sqrt(quantity))+1;
                int x = 0;
                int y = 0;
                for (int g = 0; g<quantity; g++) {
                    try {
                        gridCellTable.insertRow(false);
                        gridCellTable.setInt("TAZ", taz);
                        gridCellTable.setInt("GridCellX", x);
                        gridCellTable.setInt("GridCellY", y);
                        gridCellTable.setFloat("AmountOfLand", amountOfLand);
                        gridCellTable.setString("DevelopmentType", developmentTypeName);
                        float amountOfDevelopment = minDevelopment + myRandom.nextFloat()*(maxDevelopment - minDevelopment);
                        gridCellTable.setFloat("AmountOfDevelopment", amountOfDevelopment);
                        int age = minAge + myRandom.nextInt(maxAge - minAge +1);
                        gridCellTable.setInt("Age", age);
                        gridCellTable.setString("ZoningScheme", zoningScheme);
                        gridCellTable.post();
                    } catch (com.borland.dx.dataset.DataSetException e) {
                        System.err.println("Error adding grid cell to grid cell table");
                        e.printStackTrace();
                    }
                    x++;
                    if (x>=xSpan) {
                         x=0;
                         y++;
                    }
                }
                numberOfCellsTab.next();
            }
        
        dm.exportTable("GridCells", path + "GridCells");

        } catch (com.borland.dx.dataset.DataSetException e) {
            System.err.println("Error: setUpDevelopmentTypes()");
            e.printStackTrace();
        }
        System.exit(0);

    }

     private static TableDataSet reloadTableFromScratchFromTextFile(String tableName) {
         TableDataSet table = dm.getTableDataSet(tableName);
         try {
             table.empty();
         } catch (com.borland.dx.dataset.DataSetException e) { };
         DataManager.closeTable(table);
         dm.deleteTable(tableName);
         dm.loadTable(tableName, path + tableName, path + tableName);
         table = dm.getTableDataSet(tableName); //Add a table to data-store
         return table;
     }

     public static TableDataSet setUpGridCellTable() {
        TableDataSet gridCellTable = dm.getTableDataSet("GridCells");
        if (gridCellTable.getColumns().length != 0) { //delete it and rebuild it if it exists
            try {
                gridCellTable.empty();
            } catch (com.borland.dx.dataset.DataSetException e) { };
            DataManager.closeTable(gridCellTable);
            dm.deleteTable("GridCells");
            gridCellTable = dm.getTableDataSet("GridCells");
        }

        try {
            gridCellTable.addColumn("TAZ",Variant.INT);
            gridCellTable.addColumn("GridCellX",Variant.INT);
            gridCellTable.addColumn("GridCellY",Variant.INT);
            gridCellTable.addColumn("AmountOfLand",Variant.FLOAT);
            gridCellTable.addColumn("DevelopmentType",Variant.STRING);
            gridCellTable.addColumn("AmountOfDevelopment",Variant.FLOAT);
            gridCellTable.addColumn("Age",Variant.INT);
            gridCellTable.addColumn("ZoningScheme",Variant.STRING);
            gridCellTable.addColumn("NodeID",Variant.INT);
            gridCellTable.restructure();
            gridCellTable.setSort(
                new SortDescriptor(
                new String[] { "TAZ", "DevelopmentType"}));
        } catch (com.borland.dx.dataset.DataSetException e) {
            e.printStackTrace();
        }
        return gridCellTable;
     }

     static public final DataManager dm = new DataManager();
     static private String path;
}
